//
// Generated file, do not edit! Created by nedtool 5.4 from veins/modules/messages/CCM.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __CCM_M_H
#define __CCM_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/base/utils/Coord.h"
#include "veins/modules/messages/WaveShortMessage_m.h"
// }}

/**
 * Class generated from <tt>veins/modules/messages/CCM.msg:29</tt> by nedtool.
 * <pre>
 * packet CooperativeContMsg extends WaveShortMessage
 * {
 *     Coord senderPos;
 *     Coord senderSpeed;
 *     //	BAM
 *     string senderID;
 *     double sendingSpeed;
 *     string CurrentLane;
 *     string headingLane;
 *     double theta;
 *     bool isrsu; //this will be used to differentiate vehicles from rsus
 * 
 * }
 * </pre>
 */
class CooperativeContMsg : public ::WaveShortMessage
{
  protected:
    Coord senderPos;
    Coord senderSpeed;
    ::omnetpp::opp_string senderID;
    double sendingSpeed;
    ::omnetpp::opp_string CurrentLane;
    ::omnetpp::opp_string headingLane;
    double theta;
    bool isrsu;

  private:
    void copy(const CooperativeContMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CooperativeContMsg&);

  public:
    CooperativeContMsg(const char *name=nullptr, short kind=0);
    CooperativeContMsg(const CooperativeContMsg& other);
    virtual ~CooperativeContMsg();
    CooperativeContMsg& operator=(const CooperativeContMsg& other);
    virtual CooperativeContMsg *dup() const override {return new CooperativeContMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual Coord& getSenderPos();
    virtual const Coord& getSenderPos() const {return const_cast<CooperativeContMsg*>(this)->getSenderPos();}
    virtual void setSenderPos(const Coord& senderPos);
    virtual Coord& getSenderSpeed();
    virtual const Coord& getSenderSpeed() const {return const_cast<CooperativeContMsg*>(this)->getSenderSpeed();}
    virtual void setSenderSpeed(const Coord& senderSpeed);
    virtual const char * getSenderID() const;
    virtual void setSenderID(const char * senderID);
    virtual double getSendingSpeed() const;
    virtual void setSendingSpeed(double sendingSpeed);
    virtual const char * getCurrentLane() const;
    virtual void setCurrentLane(const char * CurrentLane);
    virtual const char * getHeadingLane() const;
    virtual void setHeadingLane(const char * headingLane);
    virtual double getTheta() const;
    virtual void setTheta(double theta);
    virtual bool getIsrsu() const;
    virtual void setIsrsu(bool isrsu);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CooperativeContMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CooperativeContMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CCM_M_H

