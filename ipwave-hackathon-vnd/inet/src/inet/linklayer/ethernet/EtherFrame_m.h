//
// Generated file, do not edit! Created by nedtool 5.4 from inet/linklayer/ethernet/EtherFrame.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_ETHERFRAME_M_H
#define __INET_ETHERFRAME_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class EthernetMacHeader;
class EthernetControlFrame;
class EthernetPauseFrame;
class Ieee802_1QHeader;
class EthernetPadding;
class EthernetFcs;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/linklayer/common/EtherType_m.h" // import inet.linklayer.common.EtherType

#include "inet/linklayer/common/FcsMode_m.h" // import inet.linklayer.common.FcsMode

#include "inet/linklayer/common/Ieee802Ctrl_m.h" // import inet.linklayer.common.Ieee802Ctrl

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress

// cplusplus {{
#include "inet/linklayer/ethernet/Ethernet.h"
// }}


namespace inet {

/**
 * Enum generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:32</tt> by nedtool.
 * <pre>
 * enum EthernetControlOpCode
 * {
 *     ETHERNET_CONTROL_PAUSE = 1;
 * }
 * </pre>
 */
enum EthernetControlOpCode {
    ETHERNET_CONTROL_PAUSE = 1
};

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:42</tt> by nedtool.
 * <pre>
 * //
 * // Ethernet MAC header
 * //
 * class EthernetMacHeader extends FieldsChunk
 * {
 *     chunkLength = B(14);
 *     MacAddress dest;
 *     MacAddress src;
 *     int typeOrLength;
 * }
 * </pre>
 */
class INET_API EthernetMacHeader : public ::inet::FieldsChunk
{
  protected:
    MacAddress dest;
    MacAddress src;
    int typeOrLength = 0;

  private:
    void copy(const EthernetMacHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EthernetMacHeader&);

  public:
    EthernetMacHeader();
    EthernetMacHeader(const EthernetMacHeader& other);
    virtual ~EthernetMacHeader();
    EthernetMacHeader& operator=(const EthernetMacHeader& other);
    virtual EthernetMacHeader *dup() const override {return new EthernetMacHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const MacAddress& getDest() const;
    virtual MacAddress& getDestForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<EthernetMacHeader*>(this)->getDest());}
    virtual void setDest(const MacAddress& dest);
    virtual const MacAddress& getSrc() const;
    virtual MacAddress& getSrcForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<EthernetMacHeader*>(this)->getSrc());}
    virtual void setSrc(const MacAddress& src);
    virtual int getTypeOrLength() const;
    virtual void setTypeOrLength(int typeOrLength);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetMacHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetMacHeader& obj) {obj.parsimUnpack(b);}

// cplusplus {{
    inline bool isEth2Header(const EthernetMacHeader& hdr)  { return isEth2Type(hdr.getTypeOrLength()); }  // typeOrLength is type
    inline bool isIeee8023Header(const EthernetMacHeader& hdr)  { return isIeee8023Length(hdr.getTypeOrLength()); }  // typeOrLength is length
// }}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:59</tt> by nedtool.
 * <pre>
 * //
 * //
 * // Ethernet control frames used by the PAUSE protocol
 * //
 * class EthernetControlFrame extends FieldsChunk
 * {
 *     //    EthernetHeader.etherType = ETHERTYPE_FLOW_CONTROL;
 *     int opCode = -1;
 * }
 * </pre>
 */
class INET_API EthernetControlFrame : public ::inet::FieldsChunk
{
  protected:
    int opCode = -1;

  private:
    void copy(const EthernetControlFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EthernetControlFrame&);

  public:
    EthernetControlFrame();
    EthernetControlFrame(const EthernetControlFrame& other);
    virtual ~EthernetControlFrame();
    EthernetControlFrame& operator=(const EthernetControlFrame& other);
    virtual EthernetControlFrame *dup() const override {return new EthernetControlFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getOpCode() const;
    virtual void setOpCode(int opCode);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetControlFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetControlFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:68</tt> by nedtool.
 * <pre>
 * //
 * // Ethernet frame used by the PAUSE protocol
 * //
 * class EthernetPauseFrame extends EthernetControlFrame
 * {
 *     chunkLength = B(4);
 *     opCode = ETHERNET_CONTROL_PAUSE;
 *     int pauseTime; // in 512 bit-time units
 * }
 * </pre>
 */
class INET_API EthernetPauseFrame : public ::inet::EthernetControlFrame
{
  protected:
    int pauseTime = 0;

  private:
    void copy(const EthernetPauseFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EthernetPauseFrame&);

  public:
    EthernetPauseFrame();
    EthernetPauseFrame(const EthernetPauseFrame& other);
    virtual ~EthernetPauseFrame();
    EthernetPauseFrame& operator=(const EthernetPauseFrame& other);
    virtual EthernetPauseFrame *dup() const override {return new EthernetPauseFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPauseTime() const;
    virtual void setPauseTime(int pauseTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetPauseFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetPauseFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:78</tt> by nedtool.
 * <pre>
 * //
 * // Ethernet 802.1Q Tag.
 * //
 * class Ieee802_1QHeader extends FieldsChunk
 * {
 *     //    previous etherType = 0x8100 (C-TAG), or 0x88a8 (S-TAG);
 *     chunkLength = B(4);
 *     uint8_t pcp;    // Priority Code Point (PCP): a 3-bit field which refers to the IEEE 802.1p priority. It indicates the frame priority level.
 *                     // Values are from 0 (best effort) to 7 (highest); 1 represents the lowest priority.
 *     bool de;        // Drop Eligible (DE): a 1-bit field. May be used separately or in conjunction with PCP to indicate frames eligible to be dropped in the presence of congestion.
 *     short VID = 0;   // VLAN Identifier (VID): a 12-bit field specifying the VLAN to which the frame belongs.
 *                     // The hexadecimal values of 0x000 and 0xFFF are reserved. All other values may be used as VLAN identifiers, allowing up to 4,094 VLANs.
 *                     // The reserved value 0x000 indicates that the frame does not belong to any VLAN; in this case,
 *                     // the 802.1Q tag specifies only a priority and is referred to as a priority tag. On bridges,
 *                     // VLAN 1 (the default VLAN ID) is often reserved for a management VLAN; this is vendor-specific.
 *     int nextTypeOrLength;
 * }
 * </pre>
 */
class INET_API Ieee802_1QHeader : public ::inet::FieldsChunk
{
  protected:
    uint8_t pcp = 0;
    bool de = false;
    short VID = 0;
    int nextTypeOrLength = 0;

  private:
    void copy(const Ieee802_1QHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee802_1QHeader&);

  public:
    Ieee802_1QHeader();
    Ieee802_1QHeader(const Ieee802_1QHeader& other);
    virtual ~Ieee802_1QHeader();
    Ieee802_1QHeader& operator=(const Ieee802_1QHeader& other);
    virtual Ieee802_1QHeader *dup() const override {return new Ieee802_1QHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint8_t getPcp() const;
    virtual void setPcp(uint8_t pcp);
    virtual bool getDe() const;
    virtual void setDe(bool de);
    virtual short getVID() const;
    virtual void setVID(short VID);
    virtual int getNextTypeOrLength() const;
    virtual void setNextTypeOrLength(int nextTypeOrLength);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee802_1QHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee802_1QHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:93</tt> by nedtool.
 * <pre>
 * class EthernetPadding extends FieldsChunk
 * {
 * }
 * </pre>
 */
class INET_API EthernetPadding : public ::inet::FieldsChunk
{
  protected:

  private:
    void copy(const EthernetPadding& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EthernetPadding&);

  public:
    EthernetPadding();
    EthernetPadding(const EthernetPadding& other);
    virtual ~EthernetPadding();
    EthernetPadding& operator=(const EthernetPadding& other);
    virtual EthernetPadding *dup() const override {return new EthernetPadding(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetPadding& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetPadding& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:97</tt> by nedtool.
 * <pre>
 * class EthernetFcs extends FieldsChunk
 * {
 *     chunkLength = ETHER_FCS_BYTES;
 *     uint32_t fcs;
 *     FcsMode fcsMode = FCS_MODE_UNDEFINED;
 * }
 * </pre>
 */
class INET_API EthernetFcs : public ::inet::FieldsChunk
{
  protected:
    uint32_t fcs = 0;
    inet::FcsMode fcsMode = FCS_MODE_UNDEFINED;

  private:
    void copy(const EthernetFcs& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EthernetFcs&);

  public:
    EthernetFcs();
    EthernetFcs(const EthernetFcs& other);
    virtual ~EthernetFcs();
    EthernetFcs& operator=(const EthernetFcs& other);
    virtual EthernetFcs *dup() const override {return new EthernetFcs(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint32_t getFcs() const;
    virtual void setFcs(uint32_t fcs);
    virtual inet::FcsMode getFcsMode() const;
    virtual void setFcsMode(inet::FcsMode fcsMode);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetFcs& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetFcs& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_ETHERFRAME_M_H

