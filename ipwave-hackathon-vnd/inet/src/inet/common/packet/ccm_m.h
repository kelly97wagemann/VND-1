//
// Generated file, do not edit! Created by nedtool 5.4 from inet/common/packet/ccm.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_CCM_M_H
#define __INET_CCM_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class ccm;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Units_m.h" // import inet.common.Units

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

// cplusplus {{
#include "inet/common/packet/Packet.h"
// }}


namespace inet {

/**
 * Class generated from <tt>inet/common/packet/ccm.msg:11</tt> by nedtool.
 * <pre>
 * //
 * class ccm
 * {
 *     string senderID;
 *     double sendingSpeed;
 *     int CurrentLane;
 *     int headingLane;
 *     bool isrsu;
 * }
 * </pre>
 */
class INET_API ccm
{
  protected:
    omnetpp::opp_string senderID;
    double sendingSpeed = 0;
    int CurrentLane = 0;
    int headingLane = 0;
    bool isrsu = false;

  private:
    void copy(const ccm& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ccm&);

  public:
    ccm();
    ccm(const ccm& other);
    virtual ~ccm();
    ccm& operator=(const ccm& other);
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSenderID() const;
    virtual void setSenderID(const char * senderID);
    virtual double getSendingSpeed() const;
    virtual void setSendingSpeed(double sendingSpeed);
    virtual int getCurrentLane() const;
    virtual void setCurrentLane(int CurrentLane);
    virtual int getHeadingLane() const;
    virtual void setHeadingLane(int headingLane);
    virtual bool getIsrsu() const;
    virtual void setIsrsu(bool isrsu);
};

} // namespace inet

#endif // ifndef __INET_CCM_M_H

